-initial pins implementation was wrong had one board per color. Only realized that when started writing code that reads them

-Move as int is slower than moves as State instances. Looks like java is good at GC.

-checked fields optimization was tricky due to king castlings.

-Catching assertionErrors in minmax, logging state and rethrowing looks like a good idea. Normal/conditionall breakpoints don't really work because of geometric growth.
At 5 plies depth generateLegalMoves() breaks ~2000000 times.

-perft(5) from initial position gives 8 moves too much. In these are 355 checkmates. Looks like 8 too much (compared with CPWiki).
These must be checkmates by white because perft(4) gives correct number of CMs (i.e. 8 - all by black).
*Printed all the CMs of and read them if they are false positives but all were all legit.
*Maybe pin logic does not prevent from generating illegal moves? Added assertion at begin of generateLegalMoves() that enemy king is not in check
and it didn't trigger.
*null moves? -there's assertion for that already..
*maybe generateLegalMoves() generates some duplicates? but perft(4) passes..?
*NEED MORE DEBUG INFO+ASSERTS!
*all CMs involve only pawns and queen, sometimes bishop.